#
# Generated by erpcgen 1.9.1 on Thu Sep 15 09:19:22 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

from . import common, interface

# import callbacks declaration from other groups
# from ..GenericDataOperations_PcToEvb import interface as interface_PcToEvb

# Client for evb_to_pc
class evb_to_pcClient(interface.Ievb_to_pc):
    def __init__(self, manager):
        super(evb_to_pcClient, self).__init__()
        self._clientManager = manager

    def ns_rpc_data_sendBlockToPC(self, block):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(
            erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.NS_RPC_DATA_SENDBLOCKTOPC_ID,
                sequence=request.sequence,
            )
        )
        if block is None:
            raise ValueError("block is None")
        block._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def ns_rpc_data_fetchBlockFromPC(self, block):
        assert type(block) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(
            erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.NS_RPC_DATA_FETCHBLOCKFROMPC_ID,
                sequence=request.sequence,
            )
        )

        # Send request and process reply.
        self._clientManager.perform_request(request)
        block.value = common.dataBlock()._read(codec)
        _result = codec.read_uint32()
        return _result

    def ns_rpc_data_computeOnPC(self, in_block, result_block):
        assert (
            type(result_block) is erpc.Reference
        ), "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(
            erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.NS_RPC_DATA_COMPUTEONPC_ID,
                sequence=request.sequence,
            )
        )
        if in_block is None:
            raise ValueError("in_block is None")
        in_block._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        result_block.value = common.dataBlock()._read(codec)
        _result = codec.read_uint32()
        return _result

    def ns_rpc_data_remotePrintOnPC(self, msg):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(
            erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.NS_RPC_DATA_REMOTEPRINTONPC_ID,
                sequence=request.sequence,
            )
        )
        if msg is None:
            raise ValueError("msg is None")
        codec.write_string(msg)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result
